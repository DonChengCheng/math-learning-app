// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 用户模型
model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  password       String?
  image          String?
  emailVerified  DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // 关系
  accounts       Account[]
  sessions       Session[]
  progress       Progress[]
  submissions    Submission[]
  achievements   UserAchievement[]
}

// OAuth账户信息
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

// 会话管理
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// 课程模型
model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  level       String    // 小学、初中、高中、大学
  subject     String    // 代数、几何、微积分等
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关系
  chapters    Chapter[]
  progress    Progress[]
}

// 章节模型
model Chapter {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
}

// 课程内容模型
model Lesson {
  id          String    @id @default(cuid())
  chapterId   String
  title       String
  content     String    @db.Text
  videoUrl    String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  problems    Problem[]
  progress    Progress[]
}

// 题目模型
model Problem {
  id          String       @id @default(cuid())
  lessonId    String?
  title       String
  content     String       @db.Text
  type        String       // multiple_choice, fill_blank, solution
  difficulty  Int          @default(1) // 1-5难度等级
  points      Int          @default(10)
  answer      Json         // 存储答案数据
  explanation String?      @db.Text
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  lesson      Lesson?      @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  submissions Submission[]
}

// 提交记录
model Submission {
  id          String    @id @default(cuid())
  userId      String
  problemId   String
  answer      Json
  isCorrect   Boolean
  score       Float
  timeSpent   Int       // 秒
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem     Problem   @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

// 学习进度
model Progress {
  id          String    @id @default(cuid())
  userId      String
  courseId    String?
  lessonId    String?
  completed   Boolean   @default(false)
  progress    Float     @default(0) // 0-100
  lastAccess  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson      Lesson?   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId, lessonId])
}

// 成就系统
model Achievement {
  id          String    @id @default(cuid())
  name        String
  description String
  icon        String
  condition   Json      // 达成条件
  points      Int       @default(0)
  createdAt   DateTime  @default(now())
  
  users       UserAchievement[]
}

// 用户成就关联
model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
}
